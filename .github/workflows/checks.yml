---
  name: Checks
  
  on: [push]
  
  jobs:
    test-lint:
      name: Test and Lint
      runs-on: ubuntu-20.04
  
      services:
        postgres:
          image: postgres:13
          env:
            POSTGRES_DB: ${{ secrets.DB_NAME }}
            POSTGRES_USER: ${{ secrets.DB_USER }}
            POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          ports:
            - 5432:5432
          options: >
            --health-cmd "pg_isready -U postgres"
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5
  
      steps:
        - name: Checkout
          uses: actions/checkout@v2
  
        - name: Set up Python
          uses: actions/setup-python@v2
          with:
            python-version: '3.11.0'
  
        - name: Install pipenv
          run: pip install pipenv
  
        - name: Install dependencies
          run: |
            pipenv install --dev
            pipenv install -r requirements.dev.txt
  
        - name: Print working directory
          run: pwd
  
        - name: List files
          run: ls -la
  
        - name: Set environment variables
          run: |
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
            echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
            echo "DB_HOST=${{ secrets.DB_HOST }}" >> $GITHUB_ENV
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> $GITHUB_ENV
  
        # Wait for Postgres to be ready
        - name: Wait for Postgres
          run: |
            until pg_isready -h ${{ secrets.DB_HOST }} -p ${{ secrets.DB_PORT }} -U ${{ secrets.DB_USER }}; do
              echo "Waiting for Postgres to be ready..."
              sleep 5
            done
  
        - name: Test
          env:
            DB_NAME: ${{ secrets.DB_NAME }}
            DB_USER: ${{ secrets.DB_USER }}
            DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
            DB_HOST: ${{ secrets.DB_HOST }}
            DB_PORT: ${{ secrets.DB_PORT }}
          working-directory: ${{ github.workspace }}
          run: pipenv run python manage.py test
  
        - name: Lint
          env:
            DB_NAME: ${{ secrets.DB_NAME }}
            DB_USER: ${{ secrets.DB_USER }}
            DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
            DB_HOST: ${{ secrets.DB_HOST }}
            DB_PORT: ${{ secrets.DB_PORT }}
          working-directory: ${{ github.workspace }}
          run: pipenv run flake8
  